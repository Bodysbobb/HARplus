attr(pivoted, "header_matrix") <- header_matrix
}
return(pivoted)
}
process_nested <- function(obj, cols) {
if (is.data.frame(obj)) {
return(pivot_df(obj, cols))
} else if (is.list(obj)) {
return(lapply(obj, function(x) process_nested(x, cols)))
}
return(obj)
}
result <- process_nested(data_obj, pivot_cols)
# Add class for special printing/export handling
if (is.data.frame(result)) {
class(result) <- c("hierarchical_pivot", class(result))
}
return(result)
}
pivoted_data_multi <- pivot_data(data_multiple, pivot_cols = c("ACTS", "COMM"))
View(pivoted_multi)
View(pivoted_multi[["sl4_data1"]][["pca"]])
View(pivoted_multi[["sl4_data1"]][["qo"]])
pivoted_data <- pivot_data(data_multiple, pivot_cols = "REG")
# Pivot a single column
pivoted_data <- pivot_data(data_multiple, pivot_cols = "REG")
# Pivot multiple columns
pivoted_data_multi <- pivot_data(data_multiple, pivot_cols = c("REG", "COMM"))
View(pivoted_multi)
View(pivoted_multi[["sl4_data1"]][["pca"]])
export_pivot_to_excel <- function(pivot_df, file_path) {
if (!inherits(pivot_df, "hierarchical_pivot")) {
stop("Input must be a hierarchical pivot table created by pivot_data()")
}
wb <- openxlsx::createWorkbook()
openxlsx::addWorksheet(wb, "Pivot")
# Get header matrix
header_matrix <- attr(pivot_df, "header_matrix")
# Write header matrix
openxlsx::writeData(wb, "Pivot", header_matrix, startRow = 1, colNames = FALSE)
# Write data
openxlsx::writeData(wb, "Pivot", pivot_df,
startRow = nrow(header_matrix) + 1,
colNames = FALSE)
# Apply formatting
header_style <- openxlsx::createStyle(textDecoration = "bold")
openxlsx::addStyle(wb, "Pivot",
style = header_style,
rows = 1:nrow(header_matrix),
cols = 1:ncol(header_matrix),
gridExpand = TRUE)
openxlsx::saveWorkbook(wb, file_path, overwrite = TRUE)
}
export_pivot_to_excel(pivoted_data_multi, "D:/GitHub/HARplus/pivot_output.xlsx")
export_pivot_to_excel <- function(pivot_df, file_path) {
if (!inherits(pivot_df, "hierarchical_pivot")) {
stop("Input must be a hierarchical pivot table created by pivot_data()")
}
wb <- openxlsx::createWorkbook()
openxlsx::addWorksheet(wb, "Pivot")
# Get header matrix
header_matrix <- attr(pivot_df, "header_matrix")
# Write header matrix
openxlsx::writeData(wb, "Pivot", header_matrix, startRow = 1, colNames = FALSE)
# Write data
openxlsx::writeData(wb, "Pivot", pivot_df,
startRow = nrow(header_matrix) + 1,
colNames = FALSE)
# Apply formatting
header_style <- openxlsx::createStyle(textDecoration = "bold")
openxlsx::addStyle(wb, "Pivot",
style = header_style,
rows = 1:nrow(header_matrix),
cols = 1:ncol(header_matrix),
gridExpand = TRUE)
openxlsx::saveWorkbook(wb, file_path, overwrite = TRUE)
}
# Pivot a single column
pivoted_data <- pivot_data(data_multiple, pivot_cols = "REG")
# Pivot multiple columns
pivoted_data_multi <- pivot_data(data_multiple, pivot_cols = c("REG", "COMM"))
export_pivot_to_excel(pivoted_data_multi, "D:/GitHub/HARplus/pivot_output.xlsx")
pivot_data <- function(data_obj, pivot_cols, name_repair = "unique") {
pivot_df <- function(df, cols) {
if (!inherits(df, "data.frame")) return(df)
available_cols <- cols[cols %in% names(df)]
if (length(available_cols) == 0) return(df)
non_pivot_cols <- setdiff(names(df), c(available_cols, "Value"))
# Create basic pivot
pivoted <- tidyr::pivot_wider(df,
id_cols = tidyselect::all_of(non_pivot_cols),
names_from = tidyselect::all_of(available_cols),
values_from = "Value",
names_sep = ".",  # Using dot as temporary separator
names_repair = name_repair)
# Create hierarchical column structure
col_names <- colnames(pivoted)
pivot_cols <- col_names[grepl("\\.", col_names)]
if (length(pivot_cols) > 0) {
# Split column names into hierarchical levels
split_names <- strsplit(pivot_cols, "\\.")
# Create hierarchical header matrix
max_levels <- max(sapply(split_names, length))
header_matrix <- matrix("", nrow = max_levels,
ncol = length(pivot_cols) + length(non_pivot_cols))
# Fill non-pivot columns
for (i in seq_along(non_pivot_cols)) {
header_matrix[1, i] <- non_pivot_cols[i]
}
# Fill pivot columns
for (i in seq_along(pivot_cols)) {
parts <- split_names[[i]]
for (j in seq_along(parts)) {
header_matrix[j, i + length(non_pivot_cols)] <- parts[j]
}
}
# Add header matrix as attribute
attr(pivoted, "header_matrix") <- header_matrix
class(pivoted) <- c("hierarchical_pivot", class(pivoted))
}
return(pivoted)
}
process_nested <- function(obj, cols) {
if (is.data.frame(obj)) {
df <- pivot_df(obj, cols)
return(df)
} else if (is.list(obj)) {
result <- lapply(obj, function(x) process_nested(x, cols))
class(result) <- c("hierarchical_pivot_list", class(result))
return(result)
}
return(obj)
}
result <- process_nested(data_obj, pivot_cols)
return(result)
}
export_pivot_to_excel <- function(pivot_df, file_path) {
if (!inherits(pivot_df, "hierarchical_pivot") &&
!inherits(pivot_df, "hierarchical_pivot_list")) {
stop("Input must be a hierarchical pivot table created by pivot_data()")
}
wb <- openxlsx::createWorkbook()
if (inherits(pivot_df, "hierarchical_pivot")) {
# Single data frame case
openxlsx::addWorksheet(wb, "Pivot")
header_matrix <- attr(pivot_df, "header_matrix")
openxlsx::writeData(wb, "Pivot", header_matrix, startRow = 1, colNames = FALSE)
openxlsx::writeData(wb, "Pivot", pivot_df,
startRow = nrow(header_matrix) + 1,
colNames = FALSE)
# Apply formatting
header_style <- openxlsx::createStyle(textDecoration = "bold")
openxlsx::addStyle(wb, "Pivot",
style = header_style,
rows = 1:nrow(header_matrix),
cols = 1:ncol(header_matrix),
gridExpand = TRUE)
} else {
# List of data frames case
for (name in names(pivot_df)) {
if (inherits(pivot_df[[name]], "hierarchical_pivot")) {
sheet_name <- make.names(substr(name, 1, 31))
openxlsx::addWorksheet(wb, sheet_name)
header_matrix <- attr(pivot_df[[name]], "header_matrix")
openxlsx::writeData(wb, sheet_name, header_matrix,
startRow = 1, colNames = FALSE)
openxlsx::writeData(wb, sheet_name, pivot_df[[name]],
startRow = nrow(header_matrix) + 1,
colNames = FALSE)
# Apply formatting
header_style <- openxlsx::createStyle(textDecoration = "bold")
openxlsx::addStyle(wb, sheet_name,
style = header_style,
rows = 1:nrow(header_matrix),
cols = 1:ncol(header_matrix),
gridExpand = TRUE)
}
}
}
openxlsx::saveWorkbook(wb, file_path, overwrite = TRUE)
}
pivoted_data_multi <- pivot_data(data_multiple, pivot_cols = c("REG", "COMM"))
export_pivot_to_excel(pivoted_data_multi, "D:/GitHub/HARplus/pivot_output.xlsx")
View(pivoted_data_multi)
pivot_data <- function(data_obj, pivot_cols, name_repair = "unique") {
pivot_df <- function(df, cols) {
if (!inherits(df, "data.frame")) return(df)
available_cols <- cols[cols %in% names(df)]
if (length(available_cols) == 0) return(df)
non_pivot_cols <- setdiff(names(df), c(available_cols, "Value"))
# Create basic pivot
pivoted <- tidyr::pivot_wider(df,
id_cols = tidyselect::all_of(non_pivot_cols),
names_from = tidyselect::all_of(available_cols),
values_from = "Value",
names_sep = ".",
names_repair = name_repair)
# Create hierarchical column structure
if (length(available_cols) > 0) {
col_names <- colnames(pivoted)
non_pivot_indices <- which(col_names %in% non_pivot_cols)
pivot_indices <- which(!col_names %in% non_pivot_cols)
# Create header matrix
header_matrix <- matrix("", nrow = length(available_cols),
ncol = length(col_names))
# Fill non-pivot columns
for (i in non_pivot_indices) {
header_matrix[1, i] <- col_names[i]
}
# Fill pivot columns
if (length(pivot_indices) > 0) {
for (i in pivot_indices) {
col_parts <- strsplit(col_names[i], "\\.")[[1]]
for (j in seq_along(col_parts)) {
header_matrix[j, i] <- col_parts[j]
}
}
}
attr(pivoted, "header_matrix") <- header_matrix
class(pivoted) <- c("hierarchical_pivot", class(pivoted))
}
return(pivoted)
}
if (is.data.frame(data_obj)) {
return(pivot_df(data_obj, pivot_cols))
} else if (is.list(data_obj)) {
result <- lapply(data_obj, function(x) pivot_df(x, pivot_cols))
class(result) <- c("hierarchical_pivot_list", class(result))
return(result)
}
return(data_obj)
}
export_pivot_to_excel <- function(pivot_df, file_path) {
if (!inherits(pivot_df, "hierarchical_pivot") &&
!inherits(pivot_df, "hierarchical_pivot_list")) {
stop("Input must be a hierarchical pivot table created by pivot_data()")
}
wb <- openxlsx::createWorkbook()
write_sheet <- function(df, sheet_name) {
openxlsx::addWorksheet(wb, sheet_name)
header_matrix <- attr(df, "header_matrix")
if (!is.null(header_matrix)) {
# Write headers
openxlsx::writeData(wb, sheet_name, header_matrix,
startRow = 1, colNames = FALSE)
# Write data with column names as they will be hidden by headers
openxlsx::writeData(wb, sheet_name, df,
startRow = nrow(header_matrix) + 1,
colNames = FALSE)
# Style headers
header_style <- openxlsx::createStyle(textDecoration = "bold")
openxlsx::addStyle(wb, sheet_name,
style = header_style,
rows = 1:nrow(header_matrix),
cols = 1:ncol(header_matrix),
gridExpand = TRUE)
} else {
openxlsx::writeData(wb, sheet_name, df)
}
}
if (inherits(pivot_df, "hierarchical_pivot")) {
write_sheet(pivot_df, "Pivot")
} else {
for (name in names(pivot_df)) {
if (inherits(pivot_df[[name]], "hierarchical_pivot")) {
sheet_name <- make.names(substr(name, 1, 31))
write_sheet(pivot_df[[name]], sheet_name)
}
}
}
openxlsx::saveWorkbook(wb, file_path, overwrite = TRUE)
}
pivoted_data_multi <- pivot_data(data_multiple, pivot_cols = c("REG", "COMM"))
export_pivot_to_excel(pivoted_data_multi, "D:/GitHub/HARplus/pivot_output.xlsx")
export_pivot_to_excel <- function(pivot_df, file_path) {
# Create workbook
wb <- openxlsx::createWorkbook()
write_sheet <- function(df, sheet_name) {
# Clean sheet name - remove special characters and limit length
sheet_name <- make.names(substr(gsub("[^[:alnum:]]", "", sheet_name), 1, 31))
openxlsx::addWorksheet(wb, sheet_name)
if (inherits(df, "hierarchical_pivot")) {
header_matrix <- attr(df, "header_matrix")
if (!is.null(header_matrix)) {
openxlsx::writeData(wb, sheet_name, header_matrix, startRow = 1, colNames = FALSE)
openxlsx::writeData(wb, sheet_name, df, startRow = nrow(header_matrix) + 1, colNames = FALSE)
# Style headers
header_style <- openxlsx::createStyle(textDecoration = "bold")
openxlsx::addStyle(wb, sheet_name, style = header_style,
rows = 1:nrow(header_matrix),
cols = 1:ncol(header_matrix),
gridExpand = TRUE)
} else {
openxlsx::writeData(wb, sheet_name, df)
}
} else {
openxlsx::writeData(wb, sheet_name, df)
}
}
# Handle different data structures
if (inherits(pivot_df, "hierarchical_pivot")) {
write_sheet(pivot_df, "Pivot")
} else if (inherits(pivot_df, "hierarchical_pivot_list")) {
# Handle top level list
for (name in names(pivot_df)) {
current_obj <- pivot_df[[name]]
# Handle nested lists
if (is.list(current_obj) && !inherits(current_obj, "hierarchical_pivot")) {
for (subname in names(current_obj)) {
if (inherits(current_obj[[subname]], "hierarchical_pivot")) {
sheet_name <- paste(name, subname, sep = "_")
write_sheet(current_obj[[subname]], sheet_name)
}
}
} else if (inherits(current_obj, "hierarchical_pivot")) {
write_sheet(current_obj, name)
}
}
} else if (is.list(pivot_df)) {
# Fallback for regular nested lists
process_list <- function(lst, prefix = "") {
for (name in names(lst)) {
current_name <- if (prefix == "") name else paste(prefix, name, sep = "_")
if (is.data.frame(lst[[name]])) {
write_sheet(lst[[name]], current_name)
} else if (is.list(lst[[name]])) {
process_list(lst[[name]], current_name)
}
}
}
process_list(pivot_df)
}
# Save workbook
openxlsx::saveWorkbook(wb, file_path, overwrite = TRUE)
}
pivoted_data_multi <- pivot_data(data_multiple, pivot_cols = c("REG", "COMM"))
export_pivot_to_excel(pivoted_data_multi, "D:/GitHub/HARplus/pivot_output.xlsx")
str(pivoted_data_multi)
pivot_data <- function(data_obj, pivot_cols, name_repair = "unique") {
pivot_df <- function(df, cols) {
if (!inherits(df, "data.frame")) return(df)
# Filter available columns from pivot_cols
available_cols <- cols[cols %in% names(df)]
if (length(available_cols) == 0) return(df)
non_pivot_cols <- setdiff(names(df), c(available_cols, "Value"))
# Create basic pivot
pivoted <- tidyr::pivot_wider(df,
id_cols = tidyselect::all_of(non_pivot_cols),
names_from = tidyselect::all_of(available_cols),
values_from = "Value",
names_sep = ".",
names_repair = name_repair)
# Create hierarchical header matrix
col_names <- colnames(pivoted)
pivot_cols <- col_names[!col_names %in% non_pivot_cols]
if (length(pivot_cols) > 0) {
# Split column names into hierarchical levels
split_names <- strsplit(pivot_cols, "\\.")
max_levels <- max(sapply(split_names, length))
# Create header matrix
header_matrix <- matrix("", nrow = max_levels,
ncol = length(col_names))
# Fill non-pivot columns
for (i in seq_along(non_pivot_cols)) {
header_matrix[1, i] <- non_pivot_cols[i]
}
# Fill pivot columns
for (i in seq_along(pivot_cols)) {
parts <- split_names[[i]]
col_idx <- which(col_names == pivot_cols[i])
for (j in seq_along(parts)) {
header_matrix[j, col_idx] <- parts[j]
}
}
attr(pivoted, "header_matrix") <- header_matrix
class(pivoted) <- c("hierarchical_pivot", class(pivoted))
}
return(pivoted)
}
# Process data object
if (is.data.frame(data_obj)) {
return(pivot_df(data_obj, pivot_cols))
} else if (is.list(data_obj)) {
result <- lapply(data_obj, function(nested) {
if (is.list(nested)) {
lapply(nested, function(df) pivot_df(df, pivot_cols))
} else {
pivot_df(nested, pivot_cols)
}
})
class(result) <- c("hierarchical_pivot_list", class(result))
return(result)
}
return(data_obj)
}
export_pivot_to_excel <- function(pivot_df, file_path) {
wb <- openxlsx::createWorkbook()
write_sheet <- function(df, sheet_name) {
# Clean sheet name
sheet_name <- make.names(substr(gsub("[^[:alnum:]]", "", sheet_name), 1, 31))
openxlsx::addWorksheet(wb, sheet_name)
if (inherits(df, "hierarchical_pivot")) {
header_matrix <- attr(df, "header_matrix")
if (!is.null(header_matrix)) {
# Write headers
openxlsx::writeData(wb, sheet_name, header_matrix, startRow = 1, colNames = FALSE)
# Write data
openxlsx::writeData(wb, sheet_name, df, startRow = nrow(header_matrix) + 1, colNames = FALSE)
# Style headers
header_style <- openxlsx::createStyle(textDecoration = "bold")
openxlsx::addStyle(wb, sheet_name, style = header_style,
rows = 1:nrow(header_matrix),
cols = 1:ncol(header_matrix),
gridExpand = TRUE)
} else {
openxlsx::writeData(wb, sheet_name, df)
}
} else {
openxlsx::writeData(wb, sheet_name, df)
}
}
# Process nested structure
process_list <- function(lst, prefix = "") {
for (name in names(lst)) {
current_obj <- lst[[name]]
current_name <- if (prefix == "") name else paste(prefix, name, sep = "_")
if (inherits(current_obj, "hierarchical_pivot")) {
write_sheet(current_obj, current_name)
} else if (is.list(current_obj)) {
# Handle nested lists
for (subname in names(current_obj)) {
if (inherits(current_obj[[subname]], "hierarchical_pivot")) {
sheet_name <- paste(current_name, subname, sep = "_")
write_sheet(current_obj[[subname]], sheet_name)
}
}
}
}
}
process_list(pivot_df)
openxlsx::saveWorkbook(wb, file_path, overwrite = TRUE)
}
pivoted_data_multi <- pivot_data(data_multiple, pivot_cols = c("REG", "COMM"))
export_pivot_to_excel(pivoted_data_multi, "D:/GitHub/HARplus/pivot_output.xlsx")
pivot_data <- function(data_obj, pivot_cols, name_repair = "unique") {
pivot_df <- function(df, cols) {
if (!inherits(df, "data.frame")) return(df)
available_cols <- cols[cols %in% names(df)]
if (length(available_cols) == 0) return(df)
non_pivot_cols <- setdiff(names(df), c(available_cols, "Value"))
if (length(available_cols) == 1) {
tidyr::pivot_wider(df,
id_cols = non_pivot_cols,
names_from = available_cols,
values_from = "Value",
names_repair = name_repair)
} else {
names_from <- lapply(available_cols, as.name)
tidyr::pivot_wider(df,
id_cols = non_pivot_cols,
names_from = names_from,
values_from = "Value",
names_sep = "_",
names_repair = name_repair)
}
}
process_nested <- function(obj, cols) {
if (is.data.frame(obj)) {
return(pivot_df(obj, cols))
} else if (is.list(obj)) {
return(lapply(obj, function(x) process_nested(x, cols)))
}
return(obj)
}
process_nested(data_obj, pivot_cols)
}
pivoted_multi <- pivot_data(data_multiple,
pivot_cols = c("COMM", "REG"))
pivot_data <- function(data_obj, pivot_cols, name_repair = "unique") {
pivot_df <- function(df, cols) {
if (!inherits(df, "data.frame")) return(df)
available_cols <- cols[cols %in% names(df)]
if (length(available_cols) == 0) return(df)
non_pivot_cols <- setdiff(names(df), c(available_cols, "Value"))
names_prefix <- paste(available_cols, collapse = "_")
tidyr::pivot_wider(df,
id_cols = tidyselect::all_of(non_pivot_cols),
names_from = tidyselect::all_of(available_cols),
values_from = "Value",
names_sep = "_",
names_repair = name_repair,
names_prefix = paste0(names_prefix, "_"))
}
process_nested <- function(obj, cols) {
if (is.data.frame(obj)) {
return(pivot_df(obj, cols))
} else if (is.list(obj)) {
return(lapply(obj, function(x) process_nested(x, cols)))
}
return(obj)
}
process_nested(data_obj, pivot_cols)
}
pivoted_multi <- pivot_data(data_multiple,
pivot_cols = c("COMM", "REG"))
devtools::document()
devtools::build_manual(path = "D:/GitHub/HARplus/")
devtools::build(path = "D:/GitHub/HARplus")
devtools::check()
devtools::document()
devtools::build_manual(path = "D:/GitHub/HARplus/")
devtools::build(path = "D:/GitHub/HARplus")
